return(change_year(birthdate, 2021))
} else {
return(change_year(birthdate, 2020))
}
return(change_year(birthdate, 2020))
}
get_next_birthday(birthdays[["mom"]])
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
next_birthdays <- lapply(birthdays, get_next_birthday())
next_birthdays <- lapply(birthdays, get_next_birthday())
next_birthdays <- lapply(birthdays, get_next_birthday(birthdate))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdate))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
get_next_birthday <- function(birthdate) {
change_year(birthdate, 2020)
date_has_passed(change_year(birthdate, 2020))
if (date_has_passed(change_year(birthdate, 2020)) == TRUE) {
twenty_one <- change_year(birthdate, 2021)
} else {
twenty <- (change_year(birthdate, 2020))
}
return(twenty_one | twenty)
}
get_next_birthday(birthdays[["mom"]])
get_next_birthday(birthdays[["mom"]])
get_next_birthday <- function(birthdate) {
change_year(birthdate, 2020)
date_has_passed(change_year(birthdate, 2020))
if (date_has_passed(change_year(birthdate, 2020)) == TRUE) {
twenty_one <- change_year(birthdate, 2021)
return(twenty_one)
} else {
twenty <- (change_year(birthdate, 2020))
return(twenty)
}
}
get_next_birthday(birthdays[["mom"]])
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
get_next_birthday(birthdays[["mom"]])
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays[[]]))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays[[]]))
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 7, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 7, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
date_has_passed <- function(random_date) {
current_day <- as.Date(Sys.time())
days_left <- current_day - random_date
return(days_left > 0)
}
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 7, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 7, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 7, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
date_has_passed <- function(random_date) {
current_day <- as.Date(Sys.time())
days_left <- current_day - random_date
return(days_left > 0)
}
date_has_passed(as.Date("2020-01-23"))
birthdays <- list(
me = as.Date("1999-10-16"),
mom = as.Date("1972-09-13"),
dad = as.Date("1969-03-27"),
brother = as.Date("1995-03-15"),
sister = as.Date("2009-11-29")
)
print(birthdays)
get_next_birthday <- function(birthdate) {
change_year(birthdate, 2020)
date_has_passed(change_year(birthdate, 2020))
if (date_has_passed(change_year(birthdate, 2020)) == TRUE) {
twenty_one <- change_year(birthdate, 2021)
return(twenty_one)
} else {
twenty <- (change_year(birthdate, 2020))
return(twenty)
}
}
get_next_birthday(birthdays[["mom"]])
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays[[]]))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 8, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 7, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
spring_break_2025 <- change_year(spring_break, 2024)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep = "-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
get_next_birthday <- function(birthdate) {
changing_year <- change_year(birthdate, 2020)
has_date_passed <- date_has_passed(changing_year)
if (has_date_passed == TRUE) {
twenty_one <- change_year(birthdate, 2021)
return(twenty_one)
} else {
twenty <- (change_year(birthdate, 2020))
return(twenty)
}
}
get_next_birthday(birthdays[["mom"]])
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
install.packages("styler")
install.packages("lintr")
library(styler)
library(lintr)
next_birthdays <- lapply(x, get_next_birthday(birthdays))
get_next_birthday(birthdays[["mom"]])
get_next_birthday(birthdays[["sister"]])
next_birthdays <- lapply(x, get_next_birthday(birthdays))
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 7, nchar(date_as_string))
new_date <- paste(year, month_and_day)
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste0(year, month_and_day)
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste0(year, month_and_day)
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste0(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste0(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste0(year, month_and_day, collapse ="-")
return(as.Date(new_date))
}
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste0(year, month_and_day, collapse ="-")
return(as.Date(new_date))
}
date_has_passed <- function(random_date) {
current_day <- as.Date(Sys.time())
days_left <- current_day - random_date
return(days_left > 0)
}
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste0(year, month_and_day, collapse ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
spring_break <- as.Date("21mar2020", "%y-%m-%d")
spring_break <- as.Date("21mar2020", "%y-%m-%d")
today <- as.Date(Sys.time(), "%d%b%Y")
today <- as.Date(Sys.time(), "%y-%m-%d")
print(days_to_break)
days_to_break <- spring_break - today
print(days_to_break)
print(days_to_break)
days_to_break <- spring_break - today
print(days_to_break)
days_to_break <- spring_break - today
print(days_to_break)
print(days_to_break)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
spring_break <- as.Date("21mar2020", "%m/%d/%Y")
today <- as.Date(Sys.time(), "%m/%d/%Y")
print(days_to_break)
today <- as.Date(Sys.time())
spring_break <- as.Date("21mar2020", "%m/%d/%Y")
print(days_to_break)
?as.Date
spring_break <- as.Date("21mar2020", "%Y-%m-%d")
today <- as.Date(Sys.time())
days_to_break <- spring_break - today
print(days_to_break)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
spring_break <- as.Date("21mar2020", "%Y/%m/%d")
spring_break <- as.Date("21mar2020", "%Y/%m/%d")
today <- as.Date(Sys.time())
days_to_break <- spring_break - today
print(days_to_break)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
today <- as.Date(Sys.time())
spring_break <- as.Date("21mar2020", "%d%b%Y")
days_to_break <- spring_break - today
print(days_to_break)
change_year <- function(some_date, year) {
date_as_string <- as.character(some_date)
month_and_day <- substr(date_as_string, 6, nchar(date_as_string))
new_date <- paste(year, month_and_day, sep ="-")
return(as.Date(new_date))
}
spring_break_2025 <- change_year(spring_break, 2025)
date_has_passed <- function(random_date) {
current_day <- as.Date(Sys.time())
days_left <- current_day - random_date
return(days_left > 0)
}
date_has_passed(as.Date("2020-01-23"))
birthdays <- list(
me = as.Date("1999-10-16"),
mom = as.Date("1972-09-13"),
dad = as.Date("1969-03-27"),
brother = as.Date("1995-03-15"),
sister = as.Date("2009-11-29")
)
print(birthdays)
get_next_birthday <- function(birthdate) {
changing_year <- change_year(birthdate, 2020)
has_date_passed <- date_has_passed(changing_year)
if (has_date_passed == TRUE) {
twenty_one <- change_year(birthdate, 2021)
return(twenty_one)
} else {
twenty <- (change_year(birthdate, 2020))
return(twenty)
}
}
get_next_birthday(birthdays[["sister"]])
next_birthdays <- lapply(x, get_next_birthday(birthdays))
next_birthdays <- lapply(birthdays, get_next_birthday(birthdays))
install.packages(c("devtools", "fueleconomy"))
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
setwd("C:/Users/tranm/Desktop/book-exercises/chapter-11-exercises/exercise-1")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
?sselect
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactureres <- select(make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactureres <- select.list(make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactureres <- select(make)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactureres <- select(make)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
install.packages("devtools")
install.packages("dplyr")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles
install.packages("devtools")
library("dplyr")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactureres <- select(make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactureres <- vehicles[vehicles$make, ]
View(manufactureres)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufactureres <- vehicles[, 'make' ]
View(manufactureres)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufactureres)
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", "make"]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
# Filter the data set for vehicles manufactured in 1997
manufacturers[manufacturers$year == "1997", "make"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", "make"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997",]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == "1997",]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
print(efficient_2wd)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id"]
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
height <- c(64, 74, 69, 69, 71)
weight <- c(135, 156, 139, 144, 152)
my_data <- data.frame(name, height, weight, stringsAsFactors=FALSE)
select(my_data, name, height)
people <- data.frame(name, height, weight, stringsAsFactors=FALSE)
filter(people, height > 70, weight < 155)
mutate(people, age = 3)
print(people)
mutate(people, age = 3)
print(people)
people <- mutate(people, age = 3)
print(people)
summarize(people, max_height = max(height), avg_weight = avg(weight))
summarize(people, max_height = max(height), avg_weight =  mean(weight))
setwd("C:/Users/tranm/Desktop/book-exercises/chapter-11-exercises/exercise-2")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
akes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, makes)
library(fueleconomy)
setwd("C:/Users/tranm/Desktop/book-exercises/chapter-11-exercises/exercise-4")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("dplyr")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
ta_sea <- filter(flights, des =="SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
ta_sea <- filter(flights, dest =="SEA")
View(ta_sea)
ta_sea <- select(ta_sea, origin, dest, delayed_in_air)
View(my_data)
View(ta_sea)
# On average, did flights to SeaTac gain or loose time?
summarize(ta_sea, avg = mean(delayed_in_air, na.rm = TRUE))
filter(flights, dest =="SEA") %>%
ta_sea <- select(ta_sea, origin, dest, delayed_in_air)
c(2.1, 2.98, 3.0999) %>% round(1)
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, delayed_in_air) %>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE))
